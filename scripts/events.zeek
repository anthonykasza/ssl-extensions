module SSL::EXTENSIONS;

export {
  global tlmsp: event(c: connection, is_client: bool, result: ParseResult_tlmsp);
  global tlmsp_delegate: event(c: connection, is_client: bool, result: ParseResult_tlmsp_delegate);
  global tlmsp_proxying: event(c: connection, is_client: bool, result: ParseResult_tlmsp_proxying);
  global application_layer_protocol_negotiation: event(c: connection, is_client: bool, result: ParseResult_application_layer_protocol_negotiation);
  global cached_info: event(c: connection, is_client: bool, result: ParseResult_cached_info);
  global cert_type: event(c: connection, is_client: bool, result: ParseResult_cert_type);
  global certificate_authorities: event(c: connection, is_client: bool, result: ParseResult_certificate_authorities);
  global client_authz: event(c: connection, is_client: bool, result: ParseResult_client_authz);
  global client_certificate_type: event(c: connection, is_client: bool, result: ParseResult_client_certificate_type);
  global client_certificate_url: event(c: connection, is_client: bool, result: ParseResult_client_certificate_url);
  global compress_certificate: event(c: connection, is_client: bool, result: ParseResult_compress_certificate);
  global connection_id: event(c: connection, is_client: bool, result: ParseResult_connection_id);
  global connection_id_deprecated: event(c: connection, is_client: bool, result: ParseResult_connection_id_deprecated);
  global cookie: event(c: connection, is_client: bool, result: ParseResult_cookie);
  global delegated_credential: event(c: connection, is_client: bool, result: ParseResult_delegated_credential);
  global dnssec_chain: event(c: connection, is_client: bool, result: ParseResult_dnssec_chain);
  global early_data: event(c: connection, is_client: bool, result: ParseResult_early_data);
  global ec_point_formats: event(c: connection, is_client: bool, result: ParseResult_ec_point_formats);
  global ech_outer_extensions: event(c: connection, is_client: bool, result: ParseResult_ech_outer_extensions);
  global encrypt_then_mac: event(c: connection, is_client: bool, result: ParseResult_encrypt_then_mac);
  global encrypted_client_hello: event(c: connection, is_client: bool, result: ParseResult_encrypted_client_hello);
  global extended_master_secret: event(c: connection, is_client: bool, result: ParseResult_extended_master_secret);
  global external_id_hash: event(c: connection, is_client: bool, result: ParseResult_external_id_hash);
  global external_session_id: event(c: connection, is_client: bool, result: ParseResult_external_session_id);
  global grease: event(c: connection, is_client: bool, result: ParseResult_grease);
  global heartbeat: event(c: connection, is_client: bool, result: ParseResult_heartbeat);
  global key_share: event(c: connection, is_client: bool, result: ParseResult_key_share);
  global key_share_reserved: event(c: connection, is_client: bool, result: ParseResult_key_share);
  global max_fragment_length: event(c: connection, is_client: bool, result: ParseResult_max_fragment_length);
  global oid_filters: event(c: connection, is_client: bool, result: ParseResult_oid_filters);
  global padding: event(c: connection, is_client: bool, result: ParseResult_padding);
  global password_salt: event(c: connection, is_client: bool, result: ParseResult_password_salt);
  global post_handshake_auth: event(c: connection, is_client: bool, result: ParseResult_post_handshake_auth);
  global pre_shared_key: event(c: connection, is_client: bool, result: ParseResult_pre_shared_key);
  global psk_key_exchange_modes: event(c: connection, is_client: bool, result: ParseResult_psk_key_exchange_modes);
  global pwd_clear: event(c: connection, is_client: bool, result: ParseResult_pwd_clear);
  global pwd_protect: event(c: connection, is_client: bool, result: ParseResult_pwd_protect);
  global quic_transport_parameters: event(c: connection, is_client: bool, result: ParseResult_quic_transport_parameters);
  global record_size_limit: event(c: connection, is_client: bool, result: ParseResult_record_size_limit);
  global renegotiation_info: event(c: connection, is_client: bool, result: ParseResult_renegotiation_info);
  global rrc: event(c: connection, is_client: bool, result: ParseResult_rrc);
  global sequence_number_encryption_algorithms: event(c: connection, is_client: bool, result: ParseResult_sequence_number_encryption_algorithms);
  global server_authz: event(c: connection, is_client: bool, result: ParseResult_server_authz);
  global server_certificate_type: event(c: connection, is_client: bool, result: ParseResult_server_certificate_type);
  global server_name: event(c: connection, is_client: bool, result: ParseResult_server_name);
  global session_ticket: event(c: connection, is_client: bool, result: ParseResult_session_ticket);
  global signature_algorithms: event(c: connection, is_client: bool, result: ParseResult_signature_algorithms);
  global signature_algorithms_cert: event(c: connection, is_client: bool, result: ParseResult_signature_algorithms_cert);
  global signed_certificate_timestamp: event(c: connection, is_client: bool, result: ParseResult_signed_certificate_timestamp);
  global srp: event(c: connection, is_client: bool, result: ParseResult_srp);
  global status_request: event(c: connection, is_client: bool, result: ParseResult_status_request);
  global status_request_v2: event(c: connection, is_client: bool, result: ParseResult_status_request_v2);
  global supported_ekt_ciphers: event(c: connection, is_client: bool, result: ParseResult_supported_ekt_ciphers);
  global supported_groups: event(c: connection, is_client: bool, result: ParseResult_supported_groups);
  global supported_versions: event(c: connection, is_client: bool, result: ParseResult_supported_versions);
  global ticket_pinning: event(c: connection, is_client: bool, result: ParseResult_ticket_pinning);
  global ticket_request: event(c: connection, is_client: bool, result: ParseResult_ticket_request);
  global tls_cert_with_extern_psk: event(c: connection, is_client: bool, result: ParseResult_tls_cert_with_extern_psk);
  global tls_lts: event(c: connection, is_client: bool, result: ParseResult_tls_lts);
  global token_binding: event(c: connection, is_client: bool, result: ParseResult_token_binding);
  global transparency_info: event(c: connection, is_client: bool, result: ParseResult_transparency_info);
  global truncated_hmac: event(c: connection, is_client: bool, result: ParseResult_truncated_hmac);
  global trusted_ca_keys: event(c: connection, is_client: bool, result: ParseResult_trusted_ca_keys);
  global use_srtp: event(c: connection, is_client: bool, result: ParseResult_use_srtp);
  global user_mapping: event(c: connection, is_client: bool, result: ParseResult_user_mapping);
}
